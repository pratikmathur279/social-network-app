service: social-network-app

frameworkVersion: ">=1.1.0 <2.0.0"


plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: data.pratikmathur.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    USERS_TABLE: { "Ref": "UsersDynamoTable" } 
    USERS_ACTIVITY_TABLE: { "Ref": "UserActivityDynamoTable"}
    EMAIL: "pratikmathur279@gmail.com"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - { "Fn::GetAtt": ["UsersDynamoTable", "Arn"] }
        - { "Fn::GetAtt": ["UserActivityDynamoTable", "Arn"] }

    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource: "*"

functions:
#check if user exists(login)
  checkUser:
    handler: users/check.check
    events:
      - http:
          path: users/{email}
          method: get
          cors: true

#create user
  createUser:
    handler: users/create.create
    events:
      - http:
          path: users
          method: post
          cors: true          

#get user
  getUser:
    handler: users/get.get  
    events:
      - http:
          path: user/{email}
          method: get
          cors: true          

#create user activity
  createUserActivity:
    handler: users/createUserActivity.createUserActivity
    events:
      - http: 
          path: userActivity
          method: post
          cors: true

#update user activity
  updateUserActivity:
    handler: users/updateUserActivity.updateUserActivity
    events:
      - http: 
          path: userActivity/{email}
          method: put
          cors: true

#get user activity
  getUserActivity:
    handler: users/getUserActivity.getUserActivity
    events:
      - http: 
          path: userActivity
          method: get
          cors: true

resources:
  Resources:
    UsersDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-users

    UserActivityDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-userActivity